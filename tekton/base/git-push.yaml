apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: git-push
  labels:
    app.kubernetes.io/version: "0.1"
  annotations:
    tekton.dev/displayName: "git push"
    tekton.dev/tags: git
    tekton.dev/categories: Git
spec:
  params:
  - name: username
    type: string
    description: user name for performing git push
  - name: email
    type: string
    description: email address to use for performing git push
  - name: files
    type: string
    description: file to push
  - name: remote
    type: string
    description: git remote to push to
    default: "origin"
  - name: branch
    type: string
    description: git branch to add the file to
    default: "main"
  - name: commit_message
    type: string
    description: commit message to use
  - default: "true"
    description: Log the commands that are executed during `git-clone`'s operation.
    name: verbose
    type: string
  - default: registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel8@sha256:da1aedf0b17f2b9dd2a46edc93ff1c0582989414b902a28cd79bad8a035c9ea4
    description: The image providing the git-init binary that this Task runs.
    name: gitInitImage
    type: string
  - default: /tekton/home
    description: |
      Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
      the gitInitImage param with an image containing custom user configuration.
    name: userHome
    type: string
  results:
    - name: commit
      description: The precise commit SHA after the git operation.
  steps:
  - env:
    - name: HOME
      value: $(params.userHome)
    - name: PARAM_VERBOSE
      value: $(params.verbose)
    - name: PARAM_USER_HOME
      value: $(params.userHome)
    - name: WORKSPACE_OUTPUT_PATH
      value: $(workspaces.output.path)
    image: $(params.gitInitImage)
    name: git-add-commit-and-push
    workingDir: $(workspaces.output.path)
    resources: {}
    script: |
      #!/usr/bin/env sh
      set -eu

      if [ "${PARAM_VERBOSE}" = "true" ] ; then
        set -x
      fi

      # Since SSH authentication ignores the $HOME environment variable,
      #  we need to copy the appropriate Secret files from the $HOME
      #  directory to the non-root user's valid home directory to use
      #  SSH authentication for Git
      #
      # cf. https://github.com/tektoncd/pipeline/blob/main/docs/auth.md#using-secrets-as-a-non-root-user
      cp -rf $HOME/.ssh /root/.ssh

      git config --global user.email "$(params.email)"
      git config --global user.name "$(params.username)"

      cp $(params.files) ./k8s 
      git add ./k8s 

      git commit -m "$(params.commit_message)"
      git push $(params.remote) HEAD:$(params.branch)

      RESULT_SHA="$(git rev-parse HEAD | tr -d '\n')"
      EXIT_CODE="$?"
      if [ "$EXIT_CODE" != 0 ]
      then
        exit $EXIT_CODE
      fi
      echo -n "$RESULT_SHA" > $(results.commit.path)

  workspaces:
  - description: The location of the git repo to push from
    name: output
